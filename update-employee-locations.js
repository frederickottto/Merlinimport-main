const { PrismaClient } = require('@prisma/client');
require('dotenv').config();

const prisma = new PrismaClient();

// Mapping of cities to correct EY addresses
const cityToAddressMapping = {
  'Berlin': {
    street: 'Friedrichstra√üe',
    houseNumber: '140',
    postCode: '10117',
    city: 'Berlin',
    country: 'Deutschland'
  },
  'Bremen': {
    street: 'Lloydstra√üe',
    houseNumber: '4-6',
    postCode: '28217',
    city: 'Bremen',
    country: 'Deutschland'
  },
  'Dortmund': {
    street: 'Westfalendamm',
    houseNumber: '11',
    postCode: '44141',
    city: 'Dortmund',
    country: 'Deutschland'
  },
  'Dresden': {
    street: 'Forststra√üe',
    houseNumber: '2',
    postCode: '01099',
    city: 'Dresden',
    country: 'Deutschland'
  },
  'D√ºsseldorf': {
    street: 'Graf-Adolf-Platz',
    houseNumber: '15',
    postCode: '40213',
    city: 'D√ºsseldorf',
    country: 'Deutschland'
  },
  'Eschborn': {
    street: 'Mergenthalerallee',
    houseNumber: '3-5',
    postCode: '65760',
    city: 'Eschborn/Frankfurt (Main)',
    country: 'Deutschland'
  },
  'Frankfurt': {
    street: 'Mergenthalerallee',
    houseNumber: '3-5',
    postCode: '65760',
    city: 'Eschborn/Frankfurt (Main)',
    country: 'Deutschland'
  },
  'Eschborn - Frankfurt/Main': {
    street: 'Mergenthalerallee',
    houseNumber: '3-5',
    postCode: '65760',
    city: 'Eschborn/Frankfurt (Main)',
    country: 'Deutschland'
  },
  'Eschborn/Frankfurt (Main)': {
    street: 'Mergenthalerallee',
    houseNumber: '3-5',
    postCode: '65760',
    city: 'Eschborn/Frankfurt (Main)',
    country: 'Deutschland'
  },
  'Essen': {
    street: 'Wittekindstra√üe',
    houseNumber: '1a',
    postCode: '45131',
    city: 'Essen',
    country: 'Deutschland'
  },
  'Freiburg': {
    street: 'Bismarckallee',
    houseNumber: '15',
    postCode: '79098',
    city: 'Freiburg',
    country: 'Deutschland'
  },
  'Hamburg': {
    street: 'Rothenbaumchaussee',
    houseNumber: '78',
    postCode: '20148',
    city: 'Hamburg',
    country: 'Deutschland'
  },
  'Hannover': {
    street: 'Landschaftsstra√üe',
    houseNumber: '8',
    postCode: '30159',
    city: 'Hannover',
    country: 'Deutschland'
  },
  'Heilbronn': {
    street: 'Titotstra√üe',
    houseNumber: '8',
    postCode: '74072',
    city: 'Heilbronn',
    country: 'Deutschland'
  },
  'K√∂ln': {
    street: 'B√∂rsenplatz',
    houseNumber: '1',
    postCode: '50667',
    city: 'K√∂ln',
    country: 'Deutschland'
  },
  'Leipzig': {
    street: 'Grimmaische Stra√üe',
    houseNumber: '25',
    postCode: '04109',
    city: 'Leipzig',
    country: 'Deutschland'
  },
  'Mannheim': {
    street: 'Gl√ºcksteinallee',
    houseNumber: '1',
    postCode: '68163',
    city: 'Mannheim',
    country: 'Deutschland'
  },
  'M√ºnchen': {
    street: 'Arnulfstra√üe',
    houseNumber: '59',
    postCode: '80636',
    city: 'M√ºnchen',
    country: 'Deutschland'
  },
  'N√ºrnberg': {
    street: 'Am Tullnaupark',
    houseNumber: '8',
    postCode: '90402',
    city: 'N√ºrnberg',
    country: 'Deutschland'
  },
  'Ravensburg': {
    street: 'Parkstra√üe',
    houseNumber: '40',
    postCode: '88212',
    city: 'Ravensburg',
    country: 'Deutschland'
  },
  'Saarbr√ºcken': {
    street: 'Heinrich-B√∂cking-Stra√üe',
    houseNumber: '6-8',
    postCode: '66121',
    city: 'Saarbr√ºcken',
    country: 'Deutschland'
  },
  'Stuttgart': {
    street: 'Flughafenstra√üe',
    houseNumber: '61',
    postCode: '70629',
    city: 'Stuttgart',
    country: 'Deutschland'
  },
  'Villingen-Schwenningen': {
    street: 'Max-Planck-Stra√üe',
    houseNumber: '11',
    postCode: '78052',
    city: 'Villingen-Schwenningen',
    country: 'Deutschland'
  }
};

async function updateEmployeeLocations() {
  console.log('üè¢ Aktualisiere Mitarbeiter-Standorte...\n');
  
  try {
    // Get all employees
    const employees = await prisma.employee.findMany({
      include: {
        location: true
      },
      orderBy: {
        pseudonym: 'asc'
      }
    });
    
    console.log(`üìä Gefunden: ${employees.length} Mitarbeiter\n`);
    
    let updatedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;
    
    for (const employee of employees) {
      try {
        // Check if employee has a location
        if (!employee.location) {
          console.log(`‚ö†Ô∏è  ${employee.pseudonym || 'Kein Pseudonym'}: Kein Standort vorhanden`);
          skippedCount++;
          continue;
        }
        
        const currentCity = employee.location.city;
        const addressMapping = cityToAddressMapping[currentCity];
        
        if (!addressMapping) {
          console.log(`‚ö†Ô∏è  ${employee.pseudonym || 'Kein Pseudonym'}: Keine Adress-Mapping f√ºr "${currentCity}" gefunden`);
          skippedCount++;
          continue;
        }
        
        // Update the location with correct address
        await prisma.location.update({
          where: {
            id: employee.location.id
          },
          data: {
            street: addressMapping.street,
            houseNumber: addressMapping.houseNumber,
            postCode: addressMapping.postCode,
            city: addressMapping.city,
            country: addressMapping.country
          }
        });
        
        console.log(`‚úÖ ${employee.pseudonym || 'Kein Pseudonym'}: ${currentCity} ‚Üí ${addressMapping.street} ${addressMapping.houseNumber}, ${addressMapping.postCode} ${addressMapping.city}`);
        updatedCount++;
        
      } catch (error) {
        console.error(`‚ùå Fehler bei ${employee.pseudonym || 'Kein Pseudonym'}:`, error.message);
        errorCount++;
      }
    }
    
    console.log('\nüìä **Zusammenfassung:**');
    console.log(`   ‚úÖ Aktualisiert: ${updatedCount} Mitarbeiter`);
    console.log(`   ‚ö†Ô∏è  √úbersprungen: ${skippedCount} Mitarbeiter`);
    console.log(`   ‚ùå Fehler: ${errorCount} Mitarbeiter`);
    
    // Show available cities for reference
    console.log('\nüèôÔ∏è  **Verf√ºgbare St√§dte f√ºr Mapping:**');
    Object.keys(cityToAddressMapping).forEach(city => {
      const mapping = cityToAddressMapping[city];
      console.log(`   - ${city}: ${mapping.street} ${mapping.houseNumber}, ${mapping.postCode} ${mapping.city}`);
    });
    
  } catch (error) {
    console.error('‚ùå Fehler beim Aktualisieren der Standorte:', error);
  } finally {
    await prisma.$disconnect();
  }
}

updateEmployeeLocations().catch(console.error); 